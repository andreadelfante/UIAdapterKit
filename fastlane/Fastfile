default_platform(:ios)

setup_travis

platform :ios do

  ########## MISC ##########

  desc "Prepare and open the workspace"
  lane :prep do
    pods(silent: false)
    sh("open ../Example/UIAdapterKit.xcworkspace")
  end

  desc "Commit to remote!"
  lane :commit do
    auto_fixing
    code_lint
    
    message = UI.input("Commit message: ")
    git_add(
      path: "."
    )
    git_commit(
      path: ".",
      message: message
    )
    push_to_git_remote
  end

  desc "Perform a code quality..."
  lane :code_lint do
    pods(silent: true)

    swiftlint(
      mode: :lint,
      executable: "Example/Pods/SwiftLint/swiftlint",
      config_file: ".swiftlint.yml",
      quiet: true
    )
  end

  desc "Linting podspec"
  lane :podspec_lint do
    pod_lib_lint(
      verbose: true,
      quick: true
    )
  end

  desc "Linting and fixing..."
  lane :auto_fixing do
    swiftlint(
      mode: :autocorrect,
      executable: "Example/Pods/SwiftLint/swiftlint",
      config_file: ".swiftlint.yml"
    )
  end

  desc "Install dependencies"
  lane :pods do |options|
    silent = options[:silent]

    cocoapods(
      podfile: "./Example/Podfile",
      try_repo_update_on_error: true,
      silent: silent
    )
  end

  ########## TESTS ##########

  desc "Run tests for UIAdapterKit (Debug config)"
  lane :test_debug do
    pods(silent: true)
    run_tests
  end

  desc "Run tests for UIAdapterKit (Release config)"
  lane :test_release do
    pods(silent: true)
    run_tests
  end

  ########## DEPLOY ##########

  desc "Deploy a new version"
  lane :deploy do
    ensure_git_branch
    git_pull

    version = read_podspec['version']
    
    prepare_changelog(version: version)
    #prepare_doc(version: version)
    publish_podspec(version: version)
  end

  private_lane :prepare_changelog do |options|
    version = options[:version]

    if git_tag_exists(tag: version)
      UI.user_error!("This version #{version} is already deployed!!")
    end

    is_write_changelog = UI.confirm "Did you write the changelog for version #{version}?"
    if !is_write_changelog
      UI.user_error!("Please write changelog for version #{version} first!")
    end

    git_add(path: "CHANGELOG.md")
    git_commit(
      path: "CHANGELOG.md",
      message: "Update CHANGELOG.md for version #{version} [skip ci]",
      allow_nothing_to_commit: true
    )

    puts "Changelog for version #{version} ready!"
  end

  lane :prepare_doc do |options|
    version = options[:version]

    jazzy(
      config: ".jazzy.yaml"
    )

    git_add(path: "docs")
    git_commit(
      path: "docs",
      message: "Update docs folder for version #{version} [skip ci]"
    )

    puts "Doc for version #{version} ready!"
  end

  private_lane :publish_podspec do |options|
    version = options[:version]

    add_git_tag(tag: version, force: true)
    push_git_tags(force: true)
    
    puts "Ready to publish a podspec with version #{version}"

    pod_push
  end
end
